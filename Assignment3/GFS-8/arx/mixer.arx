component top
 PHASE_LENGTH : generic integer = 10
 
# Datapath used in this component
 IO_WL : generic integer = 12
 IO_IWL : generic integer = 6
 
# Generic types
 T_IN : generic type = signed(IO_WL, IO_IWL)
 T_OUT : generic type = signed(IO_WL, IO_IWL)
 T_PHASE : generic type = signed(PHASE_LENGTH, 2)
 
# Ports
 data_in : in T_IN
 phase_corr : in T_PHASE
 data_out_i : out T_OUT
 data_out_q : out T_OUT
 
constant
 sin_array : array[8] of T_PHASE = {1, 0.70710678118654, 0, -0.70710678118654, -1, -0.70710678118654, 0, 0.70710678118654}
 
register
 i : unsigned(3, 3) = 0
 
begin
	case i
		when 0
		 data_out_q = sin_array[2] * data_in # sin
		 data_out_i = sin_array[0] * data_in # cos
		 i = 1
		when 1
		 data_out_q = sin_array[3] * data_in
		 data_out_i = sin_array[1] * data_in
		 i = 2
		when 2
		 data_out_q = sin_array[4] * data_in
		 data_out_i = sin_array[2] * data_in
		 i = 3
		when 3
		 data_out_q = sin_array[5] * data_in
		 data_out_i = sin_array[3] * data_in
		 i = 4
		when 4
		 data_out_q = sin_array[6] * data_in
		 data_out_i = sin_array[4] * data_in
		 i = 5
		when 5
		 data_out_q = sin_array[7] * data_in
		 data_out_i = sin_array[5] * data_in
		 i = 6
		when 6
		 data_out_q = sin_array[0] * data_in
		 data_out_i = sin_array[6] * data_in
		 i = 7
		when 7
		 data_out_q = sin_array[1] * data_in
		 data_out_i = sin_array[7] * data_in
		 i = 0
		else
		 i = 0
	 end
end
