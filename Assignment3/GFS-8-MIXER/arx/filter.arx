# -----------------------------------------------------------------------------
# (C) Bibix
# The content below includes confidential, proprietary information of
# Bibix. All use, disclosure, and/or reproduction is prohibited
# unless authorized in writing. All rights reserved.
# -----------------------------------------------------------------------------
# File         : filter.arx
# Description  : low-pass filter for GFSK demo
# Author       : Sabih Gerez, Bibix
#                based on work by Rene Moll (DSE)
# Creation date: December 7, 2011
# -----------------------------------------------------------------------------
# $Rev: 1$
# $Author: gerezsh$
# $Date: Sun Mar 12 23:52:34 CET 2023$
# $Log$
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# Direct implementation of a FIR filter (low pass)
#
#                 +---+
#  data_in  --+-->|z-1|------+---> ...
#             |   +---+      |
#            +-+            +-+
#    b(n) -->|x|  b(n+1) -->|x|    ...
#            +-+            +-+
#             |              |
#             +------------->+---> ... --> data_out
#
#
# Coefficients:
# -1 -2 0 4 8 8 0 -16 -32 -32 0 64 141 206 232 206 141 64 0 -32 -32 -16 0 8 8 4
#  0 -2 -1
# 
# Non-power of two coefficients are decomposed by Spiral (http://spiral.net/)
#
# -----------------------------------------------------------------------------

component lpf
  # Generic - settings
  # - Datapath - input
  IN_WL  : generic integer = 9
  IN_IWL : generic integer = 4

  # - Datapath - output
  OUT_WL  : generic integer = 37
  OUT_IWL : generic integer = 32

  # Generic - types
  T_IN  : generic type = signed(IN_WL,  IN_IWL)
  T_OUT : generic type = signed(OUT_WL, OUT_IWL)

  # Ports
  data_in  : in  T_IN
  data_out : out T_OUT

type

  # gradually increasing word lengths
  T_1:  signed(IN_WL+1,  IN_IWL+1)
  T_2:  signed(IN_WL+2,  IN_IWL+2)
  T_3:  signed(IN_WL+3,  IN_IWL+3)
  T_4:  signed(IN_WL+4,  IN_IWL+4)
  T_5:  signed(IN_WL+5,  IN_IWL+5)
  T_6:  signed(IN_WL+6,  IN_IWL+6)
  T_7:  signed(IN_WL+7,  IN_IWL+7)
  T_8:  signed(IN_WL+8,  IN_IWL+8)
  T_9:  signed(IN_WL+9,  IN_IWL+9)
  T_10: signed(IN_WL+10, IN_IWL+10)
  T_11: signed(IN_WL+11, IN_IWL+11)
  T_12: signed(IN_WL+12, IN_IWL+12)

  # scaled-by-1024 version of T_12
  T_out_full: signed(IN_WL+12, IN_IWL+2)

register
  # Input state
  input : array[28] of T_IN = 0

variable
  # Intermediate additions
  pair0_28, pair1_27, pair3_25, pair4_24, pair5_23, pair7_21: T_1
  pair8_20, pair9_19, pair11_17, pair12_16, pair13_15: T_1

  p232_1: T_2
  p232_2: T_6

  t4_5: T_2
  t8_9: T_2
  t0_1: T_3
  t3_7: T_4

  p141_1: T_8
  p141_2: T_6
  p141_3: T_10

  p206_1: T_8
  p206_2: T_4
  p206_3: T_9

  t11_14: T_7
  t4_5_8_9: T_8
  t0_1_3_7: T_7

  t0_1_3_4_5_7_8_9: T_9
  t12_13: T_11

  t0_1_3_4_5_7_8_9_11_14: T_11
  t0_1_3_4_5_7_8_9_11_12_13_14: T_12

  sum_scaled: T_out_full

begin
  # filter coefficients
  #  0  1 2 3 4 5 6   7   8   9 10 11  12  13  14
  #  :  : : : : : :   :   :   :  :  :   :   :   :
  # -1 -2 0 4 8 8 0 -16 -32 -32  0 64 141 206 232 

  #   15  16 17 18  19  20  21 22 23 24 25 26 27 28
  #    :   :  :  :   :   :   :  :  :  :  :  :  :  :
  #  206 141 64  0 -32 -32 -16  0  8  8  4  0 -2 -1;

  # non-power-of-2 decompositions obtained by Spiral
  # 141 = (64-1)*2 + (16-1)
  # 206 = ((64-1)  + (4+1)*8)*2
  # 232 = (32-1-2)*8

  # Filter implementation

  # Level 1 additions, pairs resulting from filter symmetry
  pair0_28  = data_in   + input[27]
  pair1_27  = input[0]  + input[26]
  pair3_25  = input[2]  + input[24]
  pair4_24  = input[3]  + input[23]
  pair5_23  = input[4]  + input[22]
  pair7_21  = input[6]  + input[20]
  pair8_20  = input[7]  + input[19]
  pair9_19  = input[8]  + input[18]
  pair11_17 = input[10] + input[16]
  pair12_16 = input[11] + input[15]
  pair13_15 = input[12] + input[14]

  # first part of 232 -> +3 (level 1)
  p232_1 = input[13] + (input[13] << 1)
  # second part 32-3=29 (level 2)
  p232_2 = (input[13] << 5) - p232_1

  # take together terms with same coefficients (level 2)
  t4_5 = pair4_24 + pair5_23
  t8_9 = pair8_20 + pair9_19
  
  # and some other terms @ level 2
  t0_1 = pair0_28 + (pair1_27 << 1)
  t3_7 = pair3_25 - (pair7_21 << 2)

  # parts of 141 @ level 2
  p141_1 = (pair12_16 << 6) - pair12_16
  p141_2 = (pair12_16 << 4) - pair12_16

  # part of 141 @ level 3
  p141_3 = (p141_1 << 1) + p141_2

  # parts of 206 @ level 2
  p206_1 = (pair13_15 << 6) - pair13_15
  p206_2 = (pair13_15 << 2) + pair13_15

  # part of 206 @ level 3
  p206_3 = p206_1 + (p206_2 << 3)

  # continue combining @ level 3
  t11_14 = (pair11_17 << 3) + p232_2
  t4_5_8_9 = (t4_5 << 3) - (t8_9 << 5)
  t0_1_3_7 = (t3_7 << 2) - t0_1

  # addtions @ level 4
  t0_1_3_4_5_7_8_9 = t0_1_3_7 + t4_5_8_9
  t12_13 = p141_3 + (p206_3 << 1)

  # final additions
  t0_1_3_4_5_7_8_9_11_14 = t0_1_3_4_5_7_8_9 + (t11_14 << 3)
  t0_1_3_4_5_7_8_9_11_12_13_14 = t0_1_3_4_5_7_8_9_11_14 + t12_13
  
  # Wire output
  sum_scaled = reinterpret(T_out_full, t0_1_3_4_5_7_8_9_11_12_13_14)
  data_out = convert(T_OUT, sum_scaled)
  
  # Update input state
  input[0] = data_in

  # shift inputs
  for i in 1:27
    input[i] = input[i-1]
  end
end

# -----------------------------------------------------------------------------
# top: instantiate lpf twice, once for I and once for Q channel
# -----------------------------------------------------------------------------

component top
  # Generic - settings
  # - Datapath - input
  IN_WL  : generic integer = 9
  IN_IWL : generic integer = 4

  # - Datapath - output
  OUT_WL  : generic integer = 5
  OUT_IWL : generic integer = 1

    # Generic - types
  T_IN  : generic type = signed(IN_WL,  IN_IWL)
  T_OUT : generic type = signed(OUT_WL, OUT_IWL, sat, trunc)

  # Ports
  data_in_i:  in  T_IN
  data_in_q:  in  T_IN
  data_out_i: out T_OUT
  data_out_q: out T_OUT

generate
  lpf_i: lpf
    IN_WL   = IN_WL
    IN_IWL  = IN_IWL
    OUT_WL  = OUT_WL
    OUT_IWL = OUT_IWL
    T_IN    = T_IN 
    T_OUT   = T_OUT
    data_in  => data_in_i
    data_out => data_out_i

  lpf_q: lpf
    IN_WL   = IN_WL
    IN_IWL  = IN_IWL
    OUT_WL  = OUT_WL
    OUT_IWL = OUT_IWL
    T_IN    = T_IN 
    T_OUT   = T_OUT
    data_in  => data_in_q
    data_out => data_out_q
begin

end
