# -----------------------------------------------------------------------------
# (C) Bibix
# The content below includes confidential, proprietary information of
# Bibix. All use, disclosure, and/or reproduction is prohibited
# unless authorized in writing. All rights reserved.
# -----------------------------------------------------------------------------
# File         : demodulator.arx
# Description  : demodulator for GFSK demo
# Author       : Sabih Gerez, Bibix
#                based on work by Rene Moll (DSE)
# Creation date: December 7, 2011
# -----------------------------------------------------------------------------
# $Rev: 1$
# $Author: gerezsh$
# $Date: Sun Mar 12 23:52:34 CET 2023$
# $Log$
# -----------------------------------------------------------------------------



# -----------------------------------------------------------------------------
# Demodulator
# 
# Implements a delay and multiply algorithm to demodulate symbols.
# -----------------------------------------------------------------------------

component top
  # Generic - settings
  # - Datapath - input
  IN_WL  : generic integer = 5
  IN_IWL : generic integer = 1

  # - Datapath - output
  OUT_WL  : generic integer = 7
  OUT_IWL : generic integer = 1

  # # - number of delays
  ND : generic integer = 4

  # # Generic - types
  T_IN  : generic type = signed(IN_WL,  IN_IWL)
  # T_OUT : generic type = signed(OUT_WL, OUT_IWL)
  T_OUT : generic type = signed(OUT_WL, OUT_IWL, sat, trunc)
  # T_IN  : generic type = real
  # T_OUT : generic type = real

  # # Ports
  data_i : in T_IN
  data_q : in T_IN

  data_out: out T_OUT

type
  # intermediate data types
  T_mul: signed(2*IN_WL, 2*IN_IWL)
  T_sum: signed(2*IN_WL+1, 2*IN_IWL+1)
  # T_mul: real
  # T_sum: real

register
  # Registers to store previous samples
  dem_samples_i : array[ND] of T_IN = 0
  dem_samples_q : array[ND] of T_IN = 0

register
  # delay-and-multiply result, before converting to output type
  result : T_sum = 0

variable
  prod_q_id, prod_i_qd: T_mul

begin
  prod_q_id = data_q * dem_samples_i[ND-1]
  prod_i_qd = data_i * dem_samples_q[ND-1]
  result = prod_q_id - prod_i_qd

  # Update FIFOs
  dem_samples_i[0] = data_i
  dem_samples_q[0] = data_q

  for n in 1:ND-1
    dem_samples_i[n] = dem_samples_i[n-1]
    dem_samples_q[n] = dem_samples_q[n-1]
  end
  
  data_out       = convert(T_OUT, result);
end
