# -----------------------------------------------------------------------------
# File         : sec_nov.arx
# Description  : second-order IIR filer with 1 multiplier and 1 adder
#                using non-overlapping scheduling
# Author       : Sabih Gerez, University of Twente
# Creation date: March 14, 2019
# -----------------------------------------------------------------------------
# $Rev: 1$
# $Author: gerezsh$
# $Date: Mon Feb 20 22:46:57 CET 2023$
# $Log$
# -----------------------------------------------------------------------------


component top
  # declare first fixed-point parameters for data and coefficients
  wl_data:  generic integer = 8
  iwl_data: generic integer = 5
  wl_coef:  generic integer = 8
  iwl_coef: generic integer = 1

  # now declare the data types for data and coefficients
  T_data: generic type = signed(wl_data, iwl_data, wrap, round)
  T_coef: generic type = signed(wl_coef, iwl_coef, sat, round)

  # now declare the IO
  data_in:  in  T_data
  data_out: out T_data

# SG: unfortunately, declaring the filter coefficients as constants
# generates the wrong code; the workaround consists of declaring them
# as variables and assigning them a constant value.

# constant
#   # the filter coefficients
#   b2: T_coef = 0.449067766265545
#   b1: T_coef = -0.803316855076157
#   b0: T_coef = 0.449067766265545
#   a2: T_coef = -0.387641686503134
#   a1: T_coef = 0.519937751601787

type
  # the intermediate data type after multiplication
  T_mult: signed(wl_data+wl_coef, iwl_data+iwl_coef)

  # the schedule requires 11 clock cycles
  # the state type
  T_state: enum(cycle0, cycle1, cycle2, cycle3, cycle4,
                cycle5, cycle6, cycle7, cycle8, cycle9, cycle10)

register
  # the registers in the design
  i1: T_data = 0
  r1: T_data = 0
  r2: T_mult = 0
  r3: T_mult = 0
  r4: T_data = 0
  d0: T_data = 0
  d1: T_data = 0
  d2: T_data = 0
  o1: T_data = 0

  # the counter that counts cycles on behalf of control
  state: T_state = T_state.cycle0

variable
  # multiplier inputs and output
  m_in_l: T_coef
  m_in_r: T_data
  m_out:  T_mult

  # adder input and output
  a_in_l: T_mult
  a_in_r: T_mult
  a_out:  T_data

  # the coefficients (see remark above)
  b2: T_coef
  b1: T_coef
  b0: T_coef
  a2: T_coef
  a1: T_coef

begin
  # assign the coefficients a value
  b2 = 0.449067766265545
  b1 = -0.803316855076157
  b0 = 0.449067766265545
  a2 = -0.387641686503134
  a1 = 0.519937751601787

  # connect multiplier inputs
  # make sure that the inputs are stable during two clock cycles
  case state
    when T_state.cycle0
      # m4 cycle 1
      m_in_l = a2
      m_in_r = d2
    when T_state.cycle1
      # m4 cycle 2
      m_in_l = a2
      m_in_r = d2
    when T_state.cycle2
      # m2 cycle 1
      m_in_l = a1
      m_in_r = d1
    when T_state.cycle3
      # m2 cycle 2
      m_in_l = a1
      m_in_r = d1
    when T_state.cycle4
      # m5 cycle 1
      m_in_l = b2
      m_in_r = d2
    when T_state.cycle5
      # m5 cycle 2
      m_in_l = b2
      m_in_r = d2
    when T_state.cycle6
      # m3 cycle 1
      m_in_l = b1
      m_in_r = d1
    when T_state.cycle7
      # m3 cycle 2
      m_in_l = b1
      m_in_r = d1
    when T_state.cycle8
      # m1 cycle 1
      m_in_l = b0
      m_in_r = r1
    when T_state.cycle9
      # m1 cycle 2
      m_in_l = b0
      m_in_r = r1
    when T_state.cycle10
      # multiplier inputs don't care here; let's not switch unnecessarily
      m_in_l = b0
      m_in_r = r1
  end

  # connect adder inputs
  # they need to be stable for a single clock cycle

  case state
    when T_state.cycle0
      # don't care
      a_in_l = r2
      a_in_r = r3
    when T_state.cycle1
      # don't care
      a_in_l = r2
      a_in_r = r3
    when T_state.cycle2
      # don't care
      a_in_l = r2
      a_in_r = r3
    when T_state.cycle3
      # don't care
      a_in_l = r2
      a_in_r = r3
    when T_state.cycle4
      # p3
      a_in_l = r2
      a_in_r = r3
    when T_state.cycle5
      # p1
      a_in_l = i1
      a_in_r = r4
    when T_state.cycle6
      # don't care
      a_in_l = i1
      a_in_r = r4
    when T_state.cycle7
      # don't care
      a_in_l = i1
      a_in_r = r4
    when T_state.cycle8
      # p4
      a_in_l = r2
      a_in_r = r3
    when T_state.cycle9
      # don't care
      a_in_l = r2
      a_in_r = r3
    when T_state.cycle10
      # p2
      a_in_l = r2
      a_in_r = r4
  end

  # arithmetic
  m_out = m_in_l * m_in_r
  a_out = a_in_l + a_in_r

  # new register values
  # specify only content updates; registers preserving their values do
  # not need to be specified
  case state
    when T_state.cycle0
      state = T_state.cycle1
      # clock_in the input, could also be done a few cycles later
      i1    = data_in
    when T_state.cycle1
      state = T_state.cycle2
      r2    = m_out
    when T_state.cycle2
      state = T_state.cycle3
    when T_state.cycle3
      state = T_state.cycle4
      r3    = m_out
    when T_state.cycle4
      state = T_state.cycle5
      r4    = a_out
    when T_state.cycle5
      state = T_state.cycle6
      r2    = m_out
      r1    = a_out
      d0    = a_out
    when T_state.cycle6
      state = T_state.cycle7
    when T_state.cycle7
      state = T_state.cycle8
      r3    = m_out
    when T_state.cycle8
      state = T_state.cycle9
      r4    = a_out
    when T_state.cycle9
      state = T_state.cycle10
      r2    = m_out
    when T_state.cycle10
      # back to initial state
      state = T_state.cycle0
      o1    = a_out 
      # shift contents of delay elements
      d1    = d0
      d2    = d1
  end

  # wire output
  data_out = o1
end